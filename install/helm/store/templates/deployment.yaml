# Code generated by skv2. DO NOT EDIT.

---

# Deployment manifest for books
{{- $books := $.Values.books}}
{{- $booksImage := $books.image }}

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: books
  name: books
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: books
  template:
    metadata:
      labels:
        app: books
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: books
      containers:
      - image: {{ $booksImage.registry }}/{{ $booksImage.repository }}:{{ $booksImage.tag }}
        args:
        - --service=books
{{- if $books.env }}
        env:
{{ toYaml $books.env | indent 10 }}
{{- end }}
        imagePullPolicy: {{ $booksImage.pullPolicy }}
        name: books
{{- if $books.resources }}
        resources:
{{ toYaml $books.resources | indent 10}}
{{- else}}
        resources:
          requests:
            cpu: 500m
            memory: 256Mi
{{- end}}
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      {{- if $booksImage.pullSecret }}
      imagePullSecrets:
        - name: {{ $booksImage.pullSecret }}
      {{- end}}


---

# Service account for books

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: books
  name: books
  namespace: {{ $.Release.Namespace }}



---
# Service for books

apiVersion: v1
kind: Service
metadata:
  labels:
    app: books
  name: books
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    app: books
  type: ClusterIP
  ports:
  - name: grpc
    port: {{ $books.ports.grpc }}


---

# Deployment manifest for records
{{- $records := $.Values.records}}
{{- $recordsImage := $records.image }}

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: records
  name: records
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: records
  template:
    metadata:
      labels:
        app: records
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: records
      containers:
      - image: {{ $recordsImage.registry }}/{{ $recordsImage.repository }}:{{ $recordsImage.tag }}
        args:
        - --service=records
{{- if $records.env }}
        env:
{{ toYaml $records.env | indent 10 }}
{{- end }}
        imagePullPolicy: {{ $recordsImage.pullPolicy }}
        name: records
{{- if $records.resources }}
        resources:
{{ toYaml $records.resources | indent 10}}
{{- else}}
        resources:
          requests:
            cpu: 500m
            memory: 256Mi
{{- end}}
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      {{- if $recordsImage.pullSecret }}
      imagePullSecrets:
        - name: {{ $recordsImage.pullSecret }}
      {{- end}}


---

# Service account for records

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: records
  name: records
  namespace: {{ $.Release.Namespace }}



---
# Service for records

apiVersion: v1
kind: Service
metadata:
  labels:
    app: records
  name: records
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    app: records
  type: ClusterIP
  ports:
  - name: grpc
    port: {{ $records.ports.grpc }}



